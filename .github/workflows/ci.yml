name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23'
  TEMPORAL_VERSION: '1.22.0'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
    
    - name: Run golangci-lint
      run: golangci-lint run --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html
    
    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 70" | bc -l) )); then
          echo "Coverage is below 70%"
          exit 1
        fi

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem -benchtime=10s ./pkg/... | tee benchmark.txt
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.txt
    
    - name: Check performance regression
      run: |
        # Check that calculator operations stay under 50ms
        if grep -q "BenchmarkCalculator.*[5-9][0-9]ms" benchmark.txt; then
          echo "Performance regression detected!"
          exit 1
        fi

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: temporal
          POSTGRES_USER: temporal
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Start Temporal
      run: |
        docker run -d \
          --name temporal \
          -p 7233:7233 \
          -e DB=postgresql \
          -e DB_PORT=5432 \
          -e POSTGRES_USER=temporal \
          -e POSTGRES_PWD=temporal \
          -e POSTGRES_SEEDS=postgres \
          temporalio/auto-setup:${{ env.TEMPORAL_VERSION }}
        
        # Wait for Temporal to be ready
        sleep 30
        docker logs temporal
    
    - name: Run integration tests
      run: |
        export TEMPORAL_SERVER=localhost:7233
        go test -tags=integration -v ./test/...

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: ./...
    
    - name: Check for hardcoded secrets
      run: |
        # Simple check for common secret patterns
        if grep -rE "(api_key|secret|password|token)\s*=\s*[\"'][^\"']+[\"']" --include="*.go" .; then
          echo "Potential hardcoded secrets found!"
          exit 1
        fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        go build -v -o volcano-llm-${{ matrix.os }}-${{ matrix.arch }} ./cmd/api-server
    
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: volcano-llm-${{ matrix.os }}-${{ matrix.arch }}
        path: volcano-llm-${{ matrix.os }}-${{ matrix.arch }}

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: |
          volcano-llm:latest
          volcano-llm:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm volcano-llm:latest --version

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, docker, integration, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for version tag
      id: version
      run: |
        # Check if commit has version tag
        VERSION=$(git describe --tags --exact-match 2>/dev/null || echo "")
        if [ -n "$VERSION" ]; then
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Creating release for version $VERSION"
        else
          echo "No version tag found, skipping release"
        fi
    
    - name: Download artifacts
      if: steps.version.outputs.version
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Create Release
      if: steps.version.outputs.version
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Volcano LLM ${{ steps.version.outputs.version }}
        body: |
          # Volcano LLM ${{ steps.version.outputs.version }}
          
          The world's first fluid software runtime!
          
          ## What's New
          See [CHANGELOG.md](CHANGELOG.md) for details.
          
          ## Downloads
          Choose the binary for your platform below.
        files: |
          ./artifacts/volcano-llm-*/*
        draft: false
        prerelease: false